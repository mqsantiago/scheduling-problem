# Optimal solution is 34?

JOBS = 52
RESOURCES_RENEW = 2
RESOURCES_NONRENEW = 2

RESOURCE_LIMITS = [30, 27, 71, 71]

SUCCESSORS = [
    [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 22],
    [50, 49, 48, 36, 33, 31, 27, 23, 16, 11],
    [51, 49, 48, 46, 41, 36, 35, 34, 33, 31, 30, 26, 12],
    [50, 49, 48, 46, 44, 43, 35, 32, 28, 27, 24, 11],
    [49, 48, 33, 31, 27, 16, 11],
    [51, 50, 49, 48, 47, 45, 44, 41, 34, 32, 30, 28, 26, 24],
    [50, 48, 46, 45, 43, 41, 34, 32, 30, 24, 21],
    [49, 48, 46, 43, 41, 35, 26, 12],
    [48, 46, 44, 43, 42, 41, 31, 30, 28, 25, 24],
    [45, 44, 41, 40, 39, 29, 27, 26],
    [51, 45, 42, 41, 39, 30, 25],
    [50, 45, 44, 42, 32, 24],
    [48, 44, 42, 32, 26, 24],
    [47, 46, 45, 43, 39, 31, 30],
    [47, 41, 39, 33, 31, 26],
    [44, 42, 30, 26, 24],
    [51, 50, 46, 43, 42, 41, 39, 38],
    [46, 43, 41, 40, 39, 38, 30],
    [42, 41, 39, 30, 27, 26],
    [47, 43, 31, 26],
    [49, 31, 26],
    [51, 39, 38, 34],
    [43, 32, 26],
    [40, 39, 38, 37],
    [47, 26],
    [38, 37],
    [38, 37],
    [40, 39],
    [46, 42],
    [37],
    [40],
    [38],
    [37],
    [37],
    [38],
    [43],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [52],
    [],
]

DURATIONS = [
    [0, 0, 0],
    [1, 8, 8],
    [1, 3, 7],
    [1, 2, 6],
    [6, 6, 7],
    [5, 9, 10],
    [3, 4, 6],
    [3, 6, 7],
    [5, 6, 9],
    [2, 5, 8],
    [4, 7, 10],
    [6, 8, 9],
    [1, 4, 10],
    [3, 7, 8],
    [3, 4, 9],
    [2, 4, 7],
    [1, 5, 5],
    [8, 9, 10],
    [3, 3, 4],
    [7, 8, 10],
    [2, 3, 4],
    [5, 7, 10],
    [1, 4, 8],
    [2, 7, 8],
    [1, 2, 7],
    [1, 2, 9],
    [2, 5, 10],
    [3, 5, 10],
    [5, 5, 7],
    [2, 5, 6],
    [1, 3, 4],
    [4, 6, 7],
    [1, 4, 9],
    [2, 7, 10],
    [2, 4, 4],
    [1, 2, 7],
    [5, 6, 7],
    [2, 3, 10],
    [4, 4, 9],
    [5, 5, 6],
    [4, 5, 8],
    [2, 4, 4],
    [5, 7, 9],
    [5, 9, 10],
    [4, 7, 10],
    [4, 9, 10],
    [5, 6, 8],
    [4, 6, 8],
    [2, 7, 10],
    [3, 5, 10],
    [5, 5, 8],
    [0, 0, 0],
]

RESOURCE_USAGE = [
    [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
    [[0, 8, 0, 3], [6, 0, 0, 2], [5, 0, 5, 0]],
    [[3, 0, 0, 8], [0, 5, 0, 7], [0, 2, 0, 3]],
    [[0, 6, 4, 0], [5, 0, 3, 0], [0, 3, 3, 0]],
    [[6, 0, 8, 0], [6, 0, 0, 8], [6, 0, 5, 0]],
    [[0, 8, 0, 7], [4, 0, 0, 4], [0, 7, 2, 0]],
    [[0, 4, 0, 6], [6, 0, 7, 0], [0, 2, 0, 5]],
    [[6, 0, 0, 2], [6, 0, 0, 1], [0, 9, 1, 0]],
    [[0, 8, 0, 2], [7, 0, 3, 0], [7, 0, 1, 0]],
    [[7, 0, 0, 1], [0, 7, 0, 1], [0, 6, 5, 0]],
    [[0, 4, 7, 0], [5, 0, 4, 0], [0, 1, 1, 0]],
    [[0, 8, 0, 4], [0, 6, 4, 0], [0, 5, 0, 1]],
    [[8, 0, 8, 0], [7, 0, 0, 7], [0, 6, 5, 0]],
    [[3, 0, 0, 9], [3, 0, 0, 5], [0, 4, 0, 5]],
    [[0, 1, 0, 8], [0, 1, 3, 0], [2, 0, 0, 7]],
    [[0, 6, 7, 0], [5, 0, 0, 3], [0, 5, 0, 2]],
    [[5, 0, 6, 0], [4, 0, 5, 0], [0, 3, 0, 2]],
    [[5, 0, 6, 0], [4, 0, 6, 0], [4, 0, 0, 3]],
    [[4, 0, 8, 0], [0, 3, 0, 7], [0, 1, 2, 0]],
    [[10, 0, 6, 0], [0, 5, 0, 8], [7, 0, 2, 0]],
    [[7, 0, 0, 6], [0, 7, 8, 0], [0, 6, 0, 5]],
    [[0, 5, 0, 5], [5, 0, 0, 5], [0, 3, 0, 3]],
    [[0, 8, 10, 0], [6, 0, 6, 0], [0, 8, 0, 3]],
    [[0, 4, 0, 7], [5, 0, 0, 5], [4, 0, 0, 3]],
    [[0, 9, 0, 7], [0, 4, 0, 5], [0, 1, 0, 2]],
    [[0, 6, 0, 8], [0, 4, 4, 0], [0, 4, 2, 0]],
    [[0, 9, 0, 5], [0, 5, 0, 5], [0, 3, 2, 0]],
    [[0, 5, 0, 6], [2, 0, 0, 4], [2, 0, 3, 0]],
    [[0, 8, 0, 8], [0, 8, 5, 0], [0, 8, 0, 4]],
    [[7, 0, 3, 0], [0, 2, 0, 4], [0, 2, 0, 1]],
    [[0, 3, 7, 0], [7, 0, 0, 4], [0, 1, 5, 0]],
    [[0, 6, 0, 7], [0, 4, 0, 7], [1, 0, 5, 0]],
    [[0, 7, 8, 0], [2, 0, 0, 4], [2, 0, 8, 0]],
    [[6, 0, 0, 6], [0, 8, 7, 0], [6, 0, 0, 1]],
    [[3, 0, 0, 6], [0, 3, 0, 2], [3, 0, 0, 2]],
    [[0, 8, 7, 0], [0, 7, 0, 6], [7, 0, 2, 0]],
    [[0, 7, 7, 0], [0, 7, 5, 0], [0, 5, 4, 0]],
    [[0, 6, 5, 0], [2, 0, 4, 0], [0, 4, 3, 0]],
    [[0, 3, 5, 0], [0, 2, 0, 3], [0, 2, 0, 2]],
    [[6, 0, 0, 3], [0, 9, 4, 0], [6, 0, 0, 2]],
    [[3, 0, 8, 0], [2, 0, 7, 0], [0, 4, 5, 0]],
    [[0, 7, 0, 6], [9, 0, 7, 0], [0, 2, 0, 1]],
    [[0, 7, 0, 8], [0, 5, 3, 0], [2, 0, 2, 0]],
    [[10, 0, 0, 2], [10, 0, 0, 1], [0, 1, 0, 1]],
    [[0, 6, 6, 0], [0, 4, 6, 0], [3, 0, 0, 6]],
    [[5, 0, 4, 0], [3, 0, 3, 0], [0, 8, 0, 7]],
    [[0, 4, 0, 6], [7, 0, 0, 6], [0, 3, 2, 0]],
    [[8, 0, 7, 0], [7, 0, 4, 0], [2, 0, 4, 0]],
    [[5, 0, 2, 0], [4, 0, 2, 0], [0, 6, 0, 1]],
    [[0, 9, 5, 0], [7, 0, 0, 7], [7, 0, 1, 0]],
    [[5, 0, 5, 0], [0, 9, 0, 6], [0, 9, 1, 0]],
    [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
]

PREDECESSORS = [
    [],
    [1],
    [1],
    [1],
    [1],
    [1],
    [1],
    [1],
    [1],
    [1],
    [1, 2, 4, 5],
    [1, 3, 8],
    [1],
    [1],
    [1],
    [1, 2, 5],
    [1],
    [1],
    [1],
    [1],
    [1, 7],
    [1],
    [1, 2],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 16],
    [1, 2, 4, 5, 9, 11],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 19, 20, 21, 23, 25],
    [1, 2, 4, 5, 10, 19],
    [1, 4, 6, 9],
    [1, 10],
    [1, 2, 3, 4, 5, 6, 7, 9, 11, 14, 16, 18, 19],
    [1, 2, 3, 5, 7, 9, 14, 15, 20, 21],
    [1, 2, 3, 4, 6, 7, 8, 12, 13, 23],
    [1, 2, 3, 5, 15],
    [1, 3, 6, 7, 22],
    [1, 3, 4, 8],
    [1, 2, 3],
    [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
    ],
    [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        35,
    ],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 28],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 24, 28, 31],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19],
    [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 19, 29],
    [1, 2, 3, 4, 7, 8, 9, 14, 17, 18, 20, 23, 36],
    [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 16],
    [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14],
    [1, 3, 4, 7, 8, 9, 10, 14, 17, 18, 29],
    [1, 2, 4, 5, 6, 9, 11, 14, 15, 20, 25],
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 13],
    [1, 2, 3, 4, 5, 6, 7, 8, 21],
    [1, 2, 3, 4, 6, 7, 8, 12, 17],
    [1, 2, 3, 4, 5, 6, 11, 17, 22],
    [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
    ],
]


# def predecessors_from_successors(all_successors):
#     predecessors = [[] for _ in all_successors]

#     for task, successors in enumerate(all_successors):
#         for successor in successors:
#             predecessors[successor - 1].append(task + 1)

#     for i, i_p in enumerate(predecessors):
#         for j, j_p in enumerate(predecessors):
#             if i + 1 in j_p:
#                 predecessors[j].extend(i_p)

#     for i, _ in enumerate(predecessors):
#         predecessors[i] = list(set(predecessors[i]))
#         predecessors[i].sort()

#     return predecessors


# print(predecessors_from_successors(SUCCESSORS))


# print(sum(i[0][2] for i in RESOURCE_USAGE))
# print(sum(i[0][3] for i in RESOURCE_USAGE))


# x = [
#     0,
#     0,
#     0,
#     0,
#     1,
#     5,
#     1,
#     9,
#     6,
#     14,
#     1,
#     3,
#     8,
#     4,
#     8,
#     12,
#     8,
#     6,
#     11,
#     9,
#     12,
#     6,
#     14,
#     14,
#     7,
#     15,
#     18,
#     9,
#     21,
#     20,
#     16,
#     22,
# ]

# m = [
#     1,
#     1,
#     1,
#     1,
#     3,
#     2,
#     1,
#     3,
#     1,
#     1,
#     3,
#     1,
#     1,
#     1,
#     1,
#     2,
#     1,
#     1,
#     2,
#     2,
#     3,
#     1,
#     1,
#     3,
#     2,
#     1,
#     1,
#     1,
#     1,
#     1,
#     3,
#     1,
# ]

# y = [(i + 1, m[i] - 1, v) for i, v in enumerate(x)]

# y.sort(key=lambda a: a[2])

# print([i[0] for i in y])
# print([i[1] for i in y])
# print([i[2] for i in y])


# z = [
#     (1, 0, 0, 0),
#     (2, 0, 0, 2),
#     (3, 0, 0, 2),
#     (4, 0, 0, 1),
#     (5, 2, 1, 9),
#     (7, 0, 1, 6),
#     (11, 2, 1, 8),
#     (12, 0, 2, 5),
#     (14, 0, 2, 4),
#     (6, 1, 2, 5),
#     (9, 0, 6, 8),
#     (18, 0, 6, 7),
#     (22, 0, 6, 9),
#     (25, 1, 7, 16),
#     (13, 0, 8, 9),
#     (15, 0, 8, 11),
#     (17, 0, 8, 14),
#     (8, 2, 8, 13),
#     (20, 1, 8, 13),
#     (28, 0, 9, 16),
#     (19, 1, 11, 15),
#     (16, 1, 11, 17),
#     (21, 2, 11, 20),
#     (10, 0, 13, 15),
#     (23, 0, 13, 14),
#     (24, 2, 13, 19),
#     (26, 0, 14, 17),
#     (31, 2, 15, 21),
#     (27, 0, 17, 20),
#     (30, 0, 19, 21),
#     (29, 0, 20, 21),
#     (32, 0, 21, 21),
# ]

# print([i[2] for i in z])


# def less_resourceful_heuristic(options):
#     task = -1
#     mode = -1
#     r = -1

#     for option in options:
#         for m, resources in enumerate(RESOURCE_USAGE[option - 1]):
#             sum_r = sum(resources[RESOURCES_RENEW:])

#             if r == -1 or r > sum_r:
#                 task = option
#                 mode = m
#                 r = sum_r

#     return task, mode


# modes = []

# for i, _ in enumerate(RESOURCE_USAGE):
#     _, task_mode = less_resourceful_heuristic([i + 1])
#     modes.append(task_mode)

# R1 = 0
# R2 = 0

# for i, task_mode in enumerate(modes):
#     R1 += RESOURCE_USAGE[i][task_mode][2]
#     R2 += RESOURCE_USAGE[i][task_mode][3]

# print(R1)
# print(R2)
